generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  posts     Post[]

  @@map("users")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
}

model Customer {
  id         String  @id @default(cuid())
  name       String  @unique
  contact    String
  address    String
  service    String
  existingId Int?
  orders     Order[]
}

model OrderLiveStatus {
  id     String  @id @default(cuid())
  status String  @unique
  orders Order[]
}

model Order {
  id                   String              @id @default(cuid())
  customerId           String
  service              String
  deliveryCharge       Float
  discount             Float
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  statusId             String
  liveStatusId         String?
  subtotal             Float?
  outsourcingCompanyId String?
  outsourcingCost      Float?
  profit               Float?
  customer             Customer            @relation(fields: [customerId], references: [id])
  liveStatus           OrderLiveStatus?    @relation(fields: [liveStatusId], references: [id])
  outsourcingCompany   OutsourcingCompany? @relation(fields: [outsourcingCompanyId], references: [id])
  status               OrderStatus         @relation(fields: [statusId], references: [id])
  items                OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  product   String
  quantity  Int
  unitPrice Float
  amount    Float
  order     Order  @relation(fields: [orderId], references: [id])
}

model Product {
  id          Int      @id @default(autoincrement())
  label       String
  value       String   @unique
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  urgentPrice Float    @default(0)
}

model ExistingCustomers {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  address   String
  contact   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   String
}

model OrderStatus {
  id     String  @id @default(cuid())
  status String  @unique
  orders Order[]
}

model OutsourcingCompany {
  id      String  @id @default(cuid())
  name    String  @unique
  contact String
  address String
  orders  Order[]
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
