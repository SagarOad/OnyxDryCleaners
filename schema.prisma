generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String       @default(cuid()) @id
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  @@map(name: "users")
}

model Post {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  published Boolean   @default(false)
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Customer {
  id        String    @default(cuid()) @id
  name      String @unique
  contact   String
  address   String
  service   String
  orders    Order[]
}

model OrderLiveStatus {
  id      String  @default(cuid()) @id
  status  String  @unique
  orders  Order[]
}

model Order {
  id              String        @default(cuid()) @id
  customer        Customer      @relation(fields: [customerId], references: [id])
  customerId      String
  service         String
  statusId        String
  status          OrderStatus   @relation(fields: [statusId], references: [id])
  liveStatusId    String?
  liveStatus      OrderLiveStatus?  @relation(fields: [liveStatusId], references: [id])
  items           OrderItem[]
  deliveryCharge  Float
  discount        Float
  createdAt       DateTime      @default(now()) @map(name: "created_at")
  updatedAt       DateTime      @updatedAt @map(name: "updated_at")
}

model OrderItem {
  id        String  @default(cuid()) @id
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   String
  quantity  Int
  unitPrice Float
  amount    Float
}

model OrderStatus {
  id        String  @default(cuid()) @id
  status    String  @unique
  orders    Order[]
}
