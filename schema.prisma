generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String    @default(cuid()) @id
  name      String?
  email     String?   @unique
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  posts     Post[]
  @@map(name: "users")
}

model Post {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  published Boolean    @default(false)
  author    User?      @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Customer {
  id        String    @default(cuid()) @id
  name      String    @unique
  contact   String
  address   String
  service   String
  existingId Int
  orders    Order[]
}

model OrderLiveStatus {
  id      String  @default(cuid()) @id
  status  String  @unique
  orders  Order[]
}

model Order {
  id                 String              @default(cuid()) @id
  customer           Customer            @relation(fields: [customerId], references: [id])
  customerId         String
  service            String
  statusId           String
  status             OrderStatus         @relation(fields: [statusId], references: [id])
  liveStatusId       String?
  liveStatus         OrderLiveStatus?    @relation(fields: [liveStatusId], references: [id])
  items              OrderItem[]
  deliveryCharge     Float
  discount           Float
  subtotal           Float?              // Field for subtotal
  outsourcingCompany OutsourcingCompany? @relation(fields: [outsourcingCompanyId], references: [id])
  outsourcingCompanyId String?           // Foreign key for outsourcing company
  outsourcingCost    Float?              // Field for outsourcing cost
  profit             Float?              // Field for profit
  createdAt          DateTime            @default(now()) @map(name: "created_at")
  updatedAt          DateTime            @updatedAt @map(name: "updated_at")
}

model OrderItem {
  id        String  @default(cuid()) @id
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   String
  quantity  Int
  unitPrice Float
  amount    Float
}

model Product {
  id          Int      @id @default(autoincrement())
  label       String
  value       String   @unique
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExistingCustomers {
  id        Int     @id @default(autoincrement())
  name      String    @unique
  contact   String
  address   String
  service   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model OrderStatus {
  id        String  @default(cuid()) @id
  status    String  @unique
  orders    Order[]
}

model OutsourcingCompany {
  id      String  @default(cuid()) @id
  name    String  @unique
  contact String
  address String
  orders  Order[]
}

model Admin {
  id        String    @default(cuid()) @id
  email     String    @unique
  password  String    // Hashed password
  role      String    @default("admin")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
}
